{"version":3,"sources":["../src/Quadtree.js"],"names":["Rectangle","require","Quadtree","boundingBox","maxPointsPerNode","points","childNodes","insertPoint","containsPoint","point","length","push","x","y","w","h","ne","nw","se","sw","forEach","p","console","log","splice","el","module","exports"],"mappings":";;AAAA,IAAMA,YAAYC,QAAQ,aAAR,CAAlB;AACA;AACA,IAAMC,WAAW,SAAXA,QAAW,CAACC,WAAD,EAAcC,gBAAd,EAAmC;AAChDD;AACAC;AACA,QAAIC,SAAS,EAAb,CAHgD,CAG5B;AACpB,QAAIC,aAAa,EAAjB,CAJgD,CAIzB;AACvB;AACA;AACA;;AAEA;AACA,QAAMC,cAAc,SAAdA,WAAc,QAAS;AACzB;AACA,YAAI,CAACJ,YAAYK,aAAZ,CAA0BC,KAA1B,CAAL,EAAuC;AACnC,mBAAO,KAAP;AACH;;AAED;AACA,YAAIJ,OAAOK,MAAP,GAAgBN,gBAAhB,IAAoCE,WAAWI,MAAX,KAAsB,CAA9D,EAAgE;;AAE5D;AACAL,mBAAOM,IAAP,CAAYF,KAAZ;AACA;AACH;;AAGD;AACM;AACA;AACA;AACN,YAAGH,WAAWI,MAAX,KAAsB,CAAzB,EAA2B;;AAEvB,gBAAME,IAAIT,YAAYS,CAAtB;AACA,gBAAMC,IAAIV,YAAYU,CAAtB;AACA,gBAAMC,IAAIX,YAAYW,CAAZ,GAAgB,CAA1B;AACA,gBAAMC,IAAIZ,YAAYY,CAAZ,GAAgB,CAA1B;AACA,gBAAMC,KAAK,IAAId,QAAJ,CAAa,IAAIF,SAAJ,CAAc,EAACY,GAAEA,IAAEE,CAAL,EAAOD,GAAEA,IAAEE,CAAX,EAAaD,GAAEA,CAAf,EAAiBC,GAAEA,CAAnB,EAAd,CAAb,EAAkDX,gBAAlD,CAAX;AACA,gBAAMa,KAAK,IAAIf,QAAJ,CAAa,IAAIF,SAAJ,CAAc,EAACY,GAAEA,CAAH,EAAKC,GAAEA,IAAEE,CAAT,EAAWD,GAAEA,CAAb,EAAeC,GAAEA,CAAjB,EAAd,CAAb,EAAgDX,gBAAhD,CAAX;AACA,gBAAMc,KAAK,IAAIhB,QAAJ,CAAa,IAAIF,SAAJ,CAAc,EAACY,GAAEA,IAAEE,CAAL,EAAOD,GAAEA,CAAT,EAAWC,GAAEA,CAAb,EAAeC,GAAEA,CAAjB,EAAd,CAAb,EAAgDX,gBAAhD,CAAX;AACA,gBAAMe,KAAK,IAAIjB,QAAJ,CAAa,IAAIF,SAAJ,CAAc,EAACY,GAAEA,CAAH,EAAKC,GAAEA,CAAP,EAASC,GAAEA,CAAX,EAAaC,GAAEA,CAAf,EAAd,CAAb,EAA8CX,gBAA9C,CAAX;AACAE,uBAAWK,IAAX,CAAgBK,EAAhB;AACAV,uBAAWK,IAAX,CAAgBM,EAAhB;AACAX,uBAAWK,IAAX,CAAgBO,EAAhB;AACAZ,uBAAWK,IAAX,CAAgBQ,EAAhB;;AAEAd,mBAAOM,IAAP,CAAYF,KAAZ;AACA;AACAJ,mBAAOe,OAAP,CAAe,aAAK;;AAEhBb,4BAAYc,CAAZ;AACH,aAHD;AAIAC,oBAAQC,GAAR,CAAYlB,MAAZ;AACAA,mBAAOmB,MAAP,CAAc,CAAd,EAAgBpB,mBAAiB,CAAjC;;AAGA;;AAEA;AACH;AACD;AACAE,mBAAWc,OAAX,CAAmB,cAAK;AACpBK,eAAGlB,WAAH,CAAeE,KAAf;AAEH,SAHD;;AAMA;AACA;AACA;AACA;AACA;AACA;AAEH,KA9DD;;AAkEA,WAAO,EAACN,wBAAD,EAAcI,wBAAd,EAA2BF,cAA3B,EAAmCC,sBAAnC,EAAP;AAIH,CAhFD;;AAkFAoB,OAAOC,OAAP,GAAiBzB,QAAjB","file":"Quadtree.js","sourcesContent":["const Rectangle = require('./Rectangle');\n// factory function with object destructuring\nconst Quadtree = (boundingBox, maxPointsPerNode) => {\n    boundingBox;\n    maxPointsPerNode;\n    let points = [];    // array to host the points\n    let childNodes = [];   // child nodes\n    // a node is either a leaf - i.e. no children\n    // \n    // a branch -  i.e has 4 children\n\n    // insert a point into the quadtree\n    const insertPoint = point => {\n        // check if valid point - within bounding box\n        if (!boundingBox.containsPoint(point)) {\n            return false\n        } \n        \n        // if isLeaf - i.e. no children and not full\n        if (points.length < maxPointsPerNode && childNodes.length === 0){\n\n            // insert Point\n            points.push(point);\n            return\n        }\n\n\n        // if is a leaf node but full subdivide\n              // split the bounding box into 4\n              // crate 4 new quadtrees with the 4 new boxes\n              // and set them as child nodes\n        if(childNodes.length === 0){\n\n            const x = boundingBox.x;\n            const y = boundingBox.y;\n            const w = boundingBox.w / 2;\n            const h = boundingBox.h / 2;\n            const ne = new Quadtree(new Rectangle({x:x+w,y:y+h,w:w,h:h}),maxPointsPerNode)\n            const nw = new Quadtree(new Rectangle({x:x,y:y+h,w:w,h:h}),maxPointsPerNode)\n            const se = new Quadtree(new Rectangle({x:x+w,y:y,w:w,h:h}),maxPointsPerNode)\n            const sw = new Quadtree(new Rectangle({x:x,y:y,w:w,h:h}),maxPointsPerNode)\n            childNodes.push(ne)\n            childNodes.push(nw)\n            childNodes.push(se)\n            childNodes.push(sw);\n            \n            points.push(point);\n            //console.log(points)\n            points.forEach(p => {\n                \n                insertPoint(p)\n            })\n            console.log(points)\n            points.splice(0,maxPointsPerNode+1);\n\n            \n            //insertPoint(point);\n   \n            return\n        }\n        // if is not a leaf node, call insert on children\n        childNodes.forEach(el=> {\n            el.insertPoint(point)\n\n        });\n        \n\n        //\n        //points.splice(0,1);\n        // console.log(points)\n        // points = [];\n        // console.log(points)\n        //return\n\n    }\n\n\n\n    return {boundingBox, insertPoint, points, childNodes}\n\n\n\n}\n\nmodule.exports = Quadtree;"]}