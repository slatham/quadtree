{"version":3,"sources":["../src/Quadtree.js"],"names":["Rectangle","require","Quadtree","boundingBox","maxPointsPerNode","points","childNodes","point","containsPoint","length","push","x","y","w","h","ne","nw","se","sw","forEach","insertPoint","p","console","log","splice","el","module","exports"],"mappings":";;;;;;AAAA;AACA,IAAMA,YAAYC,QAAQ,aAAR,CAAlB;AACA;;IACMC,Q;AAEF,sBAAYC,WAAZ,EAAwBC,gBAAxB,EAA0C;AAAA;;AAC1C,aAAKD,WAAL,GAAmBA,WAAnB;AACA,aAAKC,gBAAL,GAAwBA,gBAAxB;AACA,aAAKC,MAAL,GAAc,EAAd,CAH0C,CAGrB;AACrB,aAAKC,UAAL,GAAkB,EAAlB,CAJ0C,CAIlB;AACxB;AACA;AACA;AACA;AACC;AACD;;;;;oCACaC,K,EAAO;AAAA;;AAChB;AACA,gBAAI,CAAC,KAAKJ,WAAL,CAAiBK,aAAjB,CAA+BD,KAA/B,CAAL,EAA4C;AACxC,uBAAO,KAAP;AACH;;AAED;AACA,gBAAI,KAAKF,MAAL,CAAYI,MAAZ,GAAqB,KAAKL,gBAA1B,IAA8C,KAAKE,UAAL,CAAgBG,MAAhB,KAA2B,CAA7E,EAA+E;;AAE3E;AACA,qBAAKJ,MAAL,CAAYK,IAAZ,CAAiBH,KAAjB;AACA;AACH;;AAGD;AACM;AACA;AACA;AACN,gBAAG,KAAKD,UAAL,CAAgBG,MAAhB,KAA2B,CAA9B,EAAgC;;AAE5B,oBAAME,IAAI,KAAKR,WAAL,CAAiBQ,CAA3B;AACA,oBAAMC,IAAI,KAAKT,WAAL,CAAiBS,CAA3B;AACA,oBAAMC,IAAI,KAAKV,WAAL,CAAiBU,CAAjB,GAAqB,CAA/B;AACA,oBAAMC,IAAI,KAAKX,WAAL,CAAiBW,CAAjB,GAAqB,CAA/B;AACA,oBAAMC,KAAK,IAAIb,QAAJ,CAAa,IAAIF,SAAJ,CAAcW,IAAEE,CAAhB,EAAkBD,IAAEE,CAApB,EAAsBD,CAAtB,EAAwBC,CAAxB,CAAb,EAAwC,KAAKV,gBAA7C,CAAX;AACA,oBAAMY,KAAK,IAAId,QAAJ,CAAa,IAAIF,SAAJ,CAAcW,CAAd,EAAgBC,IAAEE,CAAlB,EAAoBD,CAApB,EAAsBC,CAAtB,CAAb,EAAsC,KAAKV,gBAA3C,CAAX;AACA,oBAAMa,KAAK,IAAIf,QAAJ,CAAa,IAAIF,SAAJ,CAAcW,IAAEE,CAAhB,EAAkBD,CAAlB,EAAoBC,CAApB,EAAsBC,CAAtB,CAAb,EAAsC,KAAKV,gBAA3C,CAAX;AACA,oBAAMc,KAAK,IAAIhB,QAAJ,CAAa,IAAIF,SAAJ,CAAcW,CAAd,EAAgBC,CAAhB,EAAkBC,CAAlB,EAAoBC,CAApB,CAAb,EAAoC,KAAKV,gBAAzC,CAAX;AACA,qBAAKE,UAAL,CAAgBI,IAAhB,CAAqBK,EAArB;AACA,qBAAKT,UAAL,CAAgBI,IAAhB,CAAqBM,EAArB;AACA,qBAAKV,UAAL,CAAgBI,IAAhB,CAAqBO,EAArB;AACA,qBAAKX,UAAL,CAAgBI,IAAhB,CAAqBQ,EAArB;;AAEA,qBAAKb,MAAL,CAAYK,IAAZ,CAAiBH,KAAjB;AACA;AACA,qBAAKF,MAAL,CAAYc,OAAZ,CAAoB,aAAK;;AAErB,0BAAKC,WAAL,CAAiBC,CAAjB;AACH,iBAHD;AAIAC,wBAAQC,GAAR,CAAY,KAAKlB,MAAjB;AACA,qBAAKA,MAAL,CAAYmB,MAAZ,CAAmB,CAAnB,EAAqB,KAAKpB,gBAAL,GAAsB,CAA3C;;AAGA;;AAEA;AACH;AACD;AACA,iBAAKE,UAAL,CAAgBa,OAAhB,CAAwB,cAAK;AACzBM,mBAAGL,WAAH,CAAeb,KAAf;AAEH,aAHD;;AAMA;AACA;AACA;AACA;AACA;AACA;AAEH;;AAID;;;;;;;;AAMJmB,OAAOC,OAAP,GAAiBzB,QAAjB","file":"Quadtree.js","sourcesContent":["// rework using prototypes\nconst Rectangle = require('./Rectangle');\n// factory function with object destructuring\nclass Quadtree {\n\n    constructor(boundingBox,maxPointsPerNode) {\n    this.boundingBox = boundingBox;\n    this.maxPointsPerNode = maxPointsPerNode;\n    this.points = [];    // array to host the points\n    this.childNodes = [];   // child nodes\n    // a node is either a leaf - i.e. no children\n    // \n    // a branch -  i.e has 4 children\n    //rect(this.boundingBox.x,this.boundingBox.y,this.boundingBox.w,this.boundingBox.h)\n    }\n    // insert a point into the quadtree\n    insertPoint (point) {\n        // check if valid point - within bounding box\n        if (!this.boundingBox.containsPoint(point)) {\n            return false\n        } \n        \n        // if isLeaf - i.e. no children and not full\n        if (this.points.length < this.maxPointsPerNode && this.childNodes.length === 0){\n\n            // insert Point\n            this.points.push(point);\n            return\n        }\n\n\n        // if is a leaf node but full subdivide\n              // split the bounding box into 4\n              // crate 4 new quadtrees with the 4 new boxes\n              // and set them as child nodes\n        if(this.childNodes.length === 0){\n\n            const x = this.boundingBox.x;\n            const y = this.boundingBox.y;\n            const w = this.boundingBox.w / 2;\n            const h = this.boundingBox.h / 2;\n            const ne = new Quadtree(new Rectangle(x+w,y+h,w,h),this.maxPointsPerNode)\n            const nw = new Quadtree(new Rectangle(x,y+h,w,h),this.maxPointsPerNode)\n            const se = new Quadtree(new Rectangle(x+w,y,w,h),this.maxPointsPerNode)\n            const sw = new Quadtree(new Rectangle(x,y,w,h),this.maxPointsPerNode)\n            this.childNodes.push(ne)\n            this.childNodes.push(nw)\n            this.childNodes.push(se)\n            this.childNodes.push(sw);\n            \n            this.points.push(point);\n            //console.log(points)\n            this.points.forEach(p => {\n                \n                this.insertPoint(p)\n            })\n            console.log(this.points)\n            this.points.splice(0,this.maxPointsPerNode+1);\n\n            \n            //insertPoint(point);\n   \n            return\n        }\n        // if is not a leaf node, call insert on children\n        this.childNodes.forEach(el=> {\n            el.insertPoint(point)\n\n        });\n        \n\n        //\n        //points.splice(0,1);\n        // console.log(points)\n        // points = [];\n        // console.log(points)\n        //return\n\n    }\n\n\n\n    //return {boundingBox, insertPoint, points, childNodes}\n\n\n\n}\n\nmodule.exports = Quadtree;"]}